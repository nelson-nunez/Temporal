@using Model.Common


@*   Buttons Component   *@
<div class="row align-items-center text-center">
    <div class="col-auto mx-auto mt-3 mb-4" style="display:flex;column-gap:30px;">

        <button type="button"
                class="btn btn-secondary mb-2 mx-auto"
                tabindex="100" @onclick="OnBackChanged">
            <i class="fas fa-reply"></i> Volver
        </button>

        <button type="button"
                hidden="@savehidden"
                @onclick="@OnSaveChanged"
                class="btn btn-primary mb-2 mx-auto"
                tabindex="101">
            <i class="fas fa-check"></i> Guardar
        </button>

        <button type="button"
                hidden="@clearhidden"
                class="btn btn-outline-secondary mb-2 mx-auto"
                @onclick="@OnClearChanged"
                tabindex="102">
            <i class="fas fa-eraser"></i> Limpiar
        </button>

        <button type="button"
                hidden="@deletehidden"
                class="btn btn-outline-danger mb-2 mx-auto"
                @onclick="@OnDeleteChanged"
                tabindex="103">
            <i class="fas fa-eraser"></i> Borrar
        </button>

    </div>
</div>

@*<button type="button" class="btn  btn-primary  ml-2" @onclick="() => OnConfirmationChange(true)"> <i class="fas fa-check"></i> Si </button>*@


@code {

    #region Vars

    [Parameter]
    public int CRUDMode { get; set; }

    [Parameter]
    public EventCallback<bool> Save { get; set; }

    [Parameter]
    public EventCallback<bool> Back { get; set; }

    [Parameter]
    public EventCallback<bool> Clear { get; set; }

    [Parameter]
    public EventCallback<bool> Delete { get; set; }

    public bool savehidden = true;

    public bool clearhidden = true;

    public bool deletehidden = true;

    #endregion

    #region Methods

    protected override async void OnInitialized()
    {
        switch (CRUDMode)
        {
            case ViewMode.Add:
                savehidden = false;
                clearhidden = false;
                deletehidden = true;
                break;
            case ViewMode.Update:
                savehidden = false;
                clearhidden = false;
                deletehidden = true;
                break;
            case ViewMode.ReadOnly:
                savehidden = true;
                clearhidden = true;
                deletehidden = true;
                break;
            case ViewMode.Delete:
                savehidden = true;
                clearhidden = true;
                deletehidden = false;
                break;
            default:
                StateHasChanged();
                break;
        }
    }

    #endregion

    protected async Task OnSaveChanged()
    {
        await Save.InvokeAsync(true);
    }

    protected async Task OnBackChanged()
    {
        await Back.InvokeAsync(true);
    }

    protected async Task OnClearChanged()
    {
        await Clear.InvokeAsync(true);
    }

    protected async Task OnDeleteChanged()
    {
        await Delete.InvokeAsync(true);
    }

}
