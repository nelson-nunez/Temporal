@page "/CustomerCRUD"
@page "/CustomerCRUD/{CRUDMode:int}"
@page "/CustomerCRUD/{Id:int}/{CRUDMode:int}"

@using IntuitChallengeUI.Services
@using Model
@using Model.Common
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Buttons
@using IntuitChallengeUI.Components

@inject NavigationManager NavManager
@inject CustomerService CustomerService


<div class="container">
    <div class="row">
        <div class="col-12 mt-5">
            <div class="row d-flex">               
                <div class="col-2 my-auto" style="text-align:right">
                    <label>Nombre</label>
                </div>
                <div class="col-4">
                <SfTextBox ID="NametextBox"
                            @bind-Value="@newCustomer.CustomerName"
                            Placeholder="Nombre"
                            Enabled="@enabled"
                            TabIndex="1"
                            CssClass="allowonlyletters" maxlength="30">
                </SfTextBox>

                </div>

                <div class="col-2 my-auto" style="text-align:right">
                    <label >Apellido</label>
                </div>
                <div class="col-4">
                <SfTextBox ID="NametextBox"
                            @bind-Value="@newCustomer.CustomerSurname"
                            Placeholder="Apellido"
                            Enabled="@enabled"
                            TabIndex="1"
                            CssClass="allowonlyletters" maxlength="30">
                </SfTextBox>
                </div>
            </div>

            <div class="row d-flex">
                <div class="col-2 my-auto mt-2" style="text-align:right">
                    <label>Fecha de Nacimento</label>
                </div>
                <div class="col-4 mt-2">
                    <SfDatePicker @bind-Value="@newCustomer.BirthDate"
                                    CssClass="allowonlydates"
                                    ShowClearButton="true"
                                    Enabled="@enabled"
                                    TabIndex="3">
                    </SfDatePicker>
                </div>

                <div class="col-2 my-auto mt-2" style="text-align:right">
                        <label>Nro. de CUIT</label>
                    </div>
                <div class="col-4 mt-2">
                <SfTextBox TValue="string"
                            @bind-Value="@newCustomer.CUIT"
                            Placeholder="Ingrese su CUIT"
                            Format="0"
                            Enabled="@enabled"
                            TabIndex="2"
                            maxlength="20"
                            ShowSpinButton="false" CssClass="allowonlynumbers">
                </SfTextBox>
                </div>
            </div>        
       
            <div class="row d-flex">
                <div class="col-2 my-auto mt-2" style="text-align:right">
                    <label>Dirección</label>
                </div>
                <div class="col-4 mt-2">
                    <SfTextBox TValue="string"
                                @bind-Value="@newCustomer.Address"
                                Placeholder="Ingrese su CUIT"
                                Format="0"
                                Enabled="@enabled"
                                TabIndex="2"
                                maxlength="30"
                                ShowSpinButton="false">
                    </SfTextBox>
                </div>
                <div class="col-2 my-auto mt-2" style="text-align:right">
                        <label>Número de Teléfono</label>
                    </div>
                <div class="col-4 mt-2">
                <SfTextBox TValue="string"
                            @bind-Value="@newCustomer.PhoneNumber"
                            Placeholder="Numero de Telefono"
                            Format="0"
                            Enabled="@enabled"
                            TabIndex="2"
                            maxlength="30"
                            ShowSpinButton="false" CssClass="allowonlynumbers">
                </SfTextBox>
                </div>
            </div>          

            <div class="row d-flex">
                <div class="col-2 my-auto mt-2" style="text-align:right">
                    <label>Email</label>
                </div>
                <div class="col-4 mt-2">
                    <SfTextBox TValue="string"
                                @bind-Value="@newCustomer.Email"
                                Placeholder="Ingrese su CUIT"
                                Format="0"
                                Enabled="@enabled"
                                TabIndex="2"
                                maxlength="20"
                                ShowSpinButton="false" CssClass="allowonlynumbers">
                    </SfTextBox>
                </div> 
            </div>        
       
            <Buttons
                CRUDMode="CRUDMode"
                Save="SaveCustomer"
                Clear="CleanFields" 
                Delete="DeleteCustomer" 
                Back="Back" >
            </Buttons>
        </div>
    </div>
</div>
<MessageComponent @ref="messageComponent"></MessageComponent>


@code {
    #region Vars

    public Customer newCustomer { get; set; } = new Customer();

    [Parameter]
    public int CRUDMode { get; set; }

    [Parameter]
    public int Id { get; set; }

    private bool isHidden { get; set; } = false;

    bool enabled = true;

    private MessageComponent messageComponent;

    #endregion

    protected override async void OnInitialized()
    {
        try
        {
            switch (CRUDMode)
            {
                case ViewMode.Add:
                    newCustomer = new Customer();
                    enabled = true;
                    break;
                case ViewMode.Update:
                    newCustomer = await CustomerService.GetCustomerByIdAsync(Id);
                    enabled = true;
                    break;
                case ViewMode.ReadOnly:
                    newCustomer = await CustomerService.GetCustomerByIdAsync(Id);
                    enabled = false;
                    break;
                case ViewMode.Delete:
                    newCustomer = await CustomerService.GetCustomerByIdAsync(Id);
                    enabled = false;
                    break;
                default:
                    newCustomer = new Customer();
                    enabled = true;
                    break;
            }
        }
        catch (Exception ex)
        {
            NavManager.NavigateTo($"/ErrorPage/{ex.Message.Replace("/", "-")}");
            return;
        }
        finally
        {
            StateHasChanged();
        }
    }

    public async Task DeleteCustomer()
    {
        try
        {
            var response = await CustomerService.DeleteCustomerAsync(newCustomer);
            if(response)
                await messageComponent.ShowMessage("Información", "Exito");
            else
                await messageComponent.ShowMessage("Información", "Error");

        }
        catch (Exception ex)
        {
            await messageComponent.ShowMessage("Error", ex.Message);
        }
        finally
        {
            CleanFields();
        }
    }

    public async Task SaveCustomer()
    {
        try
        {
            if (CRUDMode == ViewMode.Add)
            {
                var response = await CustomerService.CreateCustomerAsync(newCustomer);
                if (response != 0)
                    await messageComponent.ShowMessage("Información", "Exito");
                else
                    await messageComponent.ShowMessage("Información", "Error");               
            }   
            if (CRUDMode == ViewMode.Update)
            {
                var response = await CustomerService.UpdateCustomerAsync(newCustomer);
                if (response != 0)
                    await messageComponent.ShowMessage("Información", "Exito");
                else
                    await messageComponent.ShowMessage("Información", "Error");
            }
        }
        catch (Exception ex)
        {
            await messageComponent.ShowMessage("Error", ex.Message);
        }
        finally
        {
            Back();
            CleanFields();
        }
    }

    public void CleanFields()
    {
        newCustomer = new Customer();
        StateHasChanged();
    }

    public void Back()
    {
        NavManager.NavigateTo("/CustomerDataGrid");
    }

}